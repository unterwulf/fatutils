#!/usr/bin/poke -L
!#
/* (c) 2021 Vitaly Sinilin.  */

load fat;

fun dump_table = (int32 fd) void:
{
    var br = unmap FAT_boot_record @ fd : 0#B;
    var fat = unmap byte[br.bpb.sectors_per_fat*br.bpb.bytes_per_sector]
         @ fd : (br.bpb.reserved_sectors*br.bpb.bytes_per_sector)#B;
    var fat_bits = br.bpb.fat_bits;
    var clusters = fat'size/#B * 8 / fat_bits;
    var per_line = 8;

    fun print_offset = (uint32 off) void: { printf "0x%u32x: ", off; }
    fun print_cluster = (uint32 idx) void: { printf " 0x%u32x", idx; }

    if (fat_bits == 12) {
        print_offset = lambda (uint32 off) void: { printf "0x%u12x: ", off; };
        print_cluster = lambda (uint32 idx) void: { printf " 0x%u12x", idx; };
    } else if (fat_bits == 16) {
        print_offset = lambda (uint32 off) void: { printf "0x%u16x: ", off; };
        print_cluster = lambda (uint32 idx) void: { printf " 0x%u16x", idx; };
    }

    for (var idx = 0; idx < clusters; idx++) {
        if (idx % per_line == 0)
            print_offset(idx);
        print_cluster(fat_next_cluster(fat, fat_bits, idx));
        if ((idx + 1) % per_line == 0)
            print "\n";
    }
    if (clusters % per_line)
        print "\n";
}

if (argv'length != 1) {
    print "usage: fatable IMAGE\n";
    exit(1);
}

var filename = argv[0];

try {
    var fd = open(filename, IOS_M_RDONLY);
    dump_table(fd);
} catch (Exception e) {
    if (e == E_constraint)
        printf "`%s' is not a valid FAT image\n", filename;
    else if (e == E_io)
        printf "Couldn't open file `%s'\n", filename;
    else
        raise e;

    exit(1);
}
